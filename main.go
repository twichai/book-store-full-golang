package main

import (
	"log"
	"os"
	"time"

	"github.com/gofiber/fiber/v2"
	fiberlog "github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/gofiber/swagger"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/twichai/book-store-full-golang/docs"
	handler "github.com/twichai/book-store-full-golang/internal/Handler"
	"github.com/twichai/book-store-full-golang/internal/repository"
	"github.com/twichai/book-store-full-golang/internal/usecase"
)

// @title Fiber Example API
// @version 1.0
// @description This is a sample swagger for Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email fiber@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	newLogger := logger.New(
		log.New(os.Stdout, "\r\n", log.LstdFlags), // io writer
		logger.Config{
			SlowThreshold:             time.Second, //Slow SQL threshold
			LogLevel:                  logger.Info, // Log level
			IgnoreRecordNotFoundError: true,        // Ignore ErrRecordNotFound error for logger
			ParameterizedQueries:      false,       // Don't include params in the SQL log
			Colorful:                  true,        // Disable color
		},
	)

	dsn := os.Getenv("DSN")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: newLogger,
	})
	if err != nil {
		panic("failed to connect database")
	}

	app := fiber.New()

	app.Use(requestid.New())
	app.Use(fiberlog.New(fiberlog.Config{
		// For more options, see the Config section
		Format: "${pid} ${locals:requestid} ${status} - ${method} ${path}â€‹\n",
	}))

	app.Get("/swagger/*", swagger.HandlerDefault) // default

	bookRepo := repository.NewBookRepository(db)
	bookUsecase := usecase.NewBookUsecase(bookRepo)
	bookHandler := handler.NewBookHandler(bookUsecase)

	app.Get("/books", bookHandler.GetAll)
	app.Get("/books/:id", bookHandler.GetById)
	app.Post("/books", bookHandler.Create)
	app.Put("/books/:id", bookHandler.Update)
	app.Delete("/books/:id", bookHandler.Delete)

	app.Get("/hello", hello)

	app.Listen(":8080")
}

// hello godoc
// @Summary      Get Hello Swagger for test
// @Description  Returns a simple hello message
// @Tags         test
// @Accept       json
// @Produce      plain
// @Success      200  {string}  string  "Hello Swagger"
// @Router       /hello [get]
func hello(c *fiber.Ctx) error {
	return c.SendString("Hello")
}
